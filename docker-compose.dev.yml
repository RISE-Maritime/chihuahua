version: "3"
services:
  traefik:
    image: "traefik:v2.7"
    command:
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web-secure.address=:443"
      - "--providers.file.filename=/dev-service-config.yml"

    ports:
      - 80:80
      - 443:443
      - 8080:8080

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./dev-service-config.yml:/dev-service-config.yml"

  dummy_service_1:
    image: containous/whoami:latest

    labels:
      - traefik.http.routers.dummy_service_1.rule=Path(`/whoami`)
      - traefik.http.routers.dummy_service_1.middlewares=forward-auth@file

  dummy_service_2:
    image: containous/whoami:latest

    labels:
      - traefik.http.routers.dummy_service_2.rule=Path(`/auth`)

  database:
    image: "postgres:14.0-alpine"
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=users
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d

  postgrest:
    env_file: ".env.dev"
    image: postgrest/postgrest:v11.2.0
    restart: unless-stopped
    labels:
      - traefik.http.routers.api-router.rule=PathPrefix(`/api`)
      - traefik.http.middlewares.api-strip.stripprefix.prefixes=/api
      - traefik.http.routers.api-router.entryPoints=web
      - traefik.http.services.api-service.loadbalancer.server.port=3001
      - traefik.http.routers.api-router.service=api-service
      - traefik.http.routers.api-router.middlewares=api-strip
    environment:
      - PGRST_DB_URI=postgresql://admin:password@database/users
      # - PGRST_DB_ANON_ROLE=todo_user
      - PGRST_DB_SCHEMA=public
      - PGRST_SERVER_PORT=3001
      - PGRST_JWT_SECRET=thisisatokenofmyappreciationforyou
      - PGRST_JWT_SECRET_IS_BASE64=false
